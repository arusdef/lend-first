

// --------------------------------------------------------------------------
// BUTTONS
// 1. Align the button in an inline form block.
// --------------------------------------------------------------------------


@mixin ButtonType {
	color: color(text, white);
	font-family: $font-sans-bold;
	font-size: map-fetch($size, font, textSm, xs);
	text-transform: uppercase;

	@include respond-to(xs) {
		font-size: map-fetch($size, font, textSm, base);
	}
}

// use this to vertically align elements with a button
.ButtonLineHeight {
	line-height: size(button-height, base);
	vertical-align: bottom;
}

// theme typography alignment
$ButtonAlignment: 2px;


.Button {
	@include ButtonType();
	background-color: color(ui, brand);
	border: 1px solid transparent;
	border-radius: map-fetch($size, border-radius, base);
	line-height: size(button-height, base);
	padding: 0 space(0.5);
	transition: all map-fetch($transition, duration, short) map-fetch($transition, type, base);
	vertical-align: top; // 1.

	// theme typography alignment
	padding-top: $ButtonAlignment;

	@include respond-to(xs) {
		padding: $ButtonAlignment space(1) 0;
	}

	a {
		@include u-link(none);
	}

	@include on-event() {
		background-color: color(ui, brand-dark);
		color: color(text, white);
		outline: none !important;
	}

	&.Button--highlight {
		background-color: color(ui, brand-alt);
		@include on-event() {
			background-color: color(ui, brand-alt-dark);
		}
	}

	&.Button--feature {
		background-color: color(ui, brand-alt-muted);
		@include on-event() {
			background-color: color(ui, brand-alt-muted-dark);
		}
	}

	&.Button--rev {
		border: 2px solid color(ui, white);
		background-color: transparent;
		@include on-event() {
			color: color(ui, white);
			background-color: color(ui, brand-dark);
		}
	}

	&.Button--highlightRev {
		border: 2px solid color(ui, brand-alt);
		background-color: transparent;
		color: color(ui, brand-alt);
		@include on-event() {
			background-color: color(ui, brand-alt-dark);
			border-color: color(ui, brand-alt-dark);
			color: color(ui, white);
		}
	}
}


// Secondary buttons
// --------------------------------------------------------------------------

@mixin ButtonSecondary (
	$mixin-color: color(ui, brand-alt),
	$mixin-hover-color: color(ui, brand-alt-dark)
) {
	background-color: transparent;
	border-color: currentColor;
	color: $mixin-color;
	padding-top: 2px; // theme typography alignment

	@include on-event() {
		background-color: transparent !important;
		border-color: $mixin-hover-color;
		color: $mixin-hover-color;
	}

	&.is-disabled {
		color: color(text, medium);
		border-color: currentColor;
		opacity: 0.4;
	}
}

.Button--secondary {
	@include ButtonSecondary();
}

.Button--invisible {
	@include ButtonSecondary();
	border-color: transparent;
	font-family: $font-sans-regular;
	padding: 0 space(0.25);
	@include on-event() {
		border-color: color(ui, muted);
	}
}


// 'X' v1
// --------------------------------------------------------------------------

.Button--x {
	background: transparent !important;
	border: none;
	content: '';
	padding: space(1);
	position: absolute;
	right: -24%;
	top: -12%;

	@include respond-to(max-xs) {
		right: -8%;
		top: -25%;
	}

	.icon-bar {
		display: block;
		width: 35px;
		height: 2px;
		border-radius: 1px;
		background-color: $color-grey-lite !important;

		&.top{
			transform: rotate(45deg);
			transform-origin: 40% 100%;
		}

		&.bottom{
			transform: rotate(-45deg);
			transform-origin: 50% 100%;
		}
	}
}




// Close button v2
// --------------------------------------------------------------------------

// Suit overrride
// TODO: move into close button only?

button:focus { outline: none; }

.Button--close {
	color: color(text, muted);
	font-family: $font-sans-thin;
	font-size: map-fetch($size, font, close, xs);
	line-height: inherit;
	position: absolute;
	right: -12%;
	top: -5%;

	@include respond-to(sm) {
		font-size: map-fetch($size, font, close, base);
	}
}

.Button--close-label {
	color: inherit;
	display: block;
	font-family: $font-sans-medium;
	font-size: map-fetch($size, font, textXs, xs);
	letter-spacing: 0.02em;
	text-transform: uppercase;
	transform: translateY( space(-1) );

	@include respond-to(xs) {
		font-size: map-fetch($size, font, textXs, base);
	}
}
